name: CI Build Image Docker
description: Builds and caches Docker images for Greengage CI pipelines. Supports versioned OS configurations, tags images with commit SHA, and pushes to GHCR for PRs. Ideal for CI/CD workflows requiring containerized environments.
inputs:
  version:
    description: 'Greengage version (e.g., 6 or 7)'
    required: true
  target_os:
    description: 'Target operating system (e.g., ubuntu, centos)'
    required: true
  target_os_version:
    description: 'Target OS version (e.g., 20, 7)'
    required: false
    default: ''
  python3:
    description: 'Python3 build argument for the Dockerfile'
    required: false
    default: ''
runs:
  using: 'docker'
  image: 'docker://docker:24.0'
  args:
    - /bin/sh
    - -c
    - |
      # Exit on any error
      set -ex
      # Install dependencies for git, curl, jq and gzip
      apk add --no-cache git curl jq gzip
      # Debug: Show repository being cloned
      echo "Cloning repository: ${GITHUB_REPOSITORY}"
      # Clone repository without submodules
      git clone https://github.com/${GITHUB_REPOSITORY}.git /workspace
      cd /workspace
      # DEBUG
      env
      # Checkout the specific commit
      git checkout ${GITHUB_HEAD_REF}
      # Debug: Show submodules being initialized
      echo "Initializing submodules"
      # Initialize and update submodules recursively
      git submodule update --init --recursive
      git fetch --tags --force
      # Set up Docker Buildx for multi-platform builds
      docker buildx create --use
      # Build Docker image with specified version and OS
      IMAGE=ghcr.io/${GITHUB_REPOSITORY}/ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}
      IMAGE=$(echo "$IMAGE" | tr '[:upper:]' '[:lower:]')
      docker build --tag ${IMAGE}:${GITHUB_SHA} -f ci/Dockerfile.${{ inputs.target_os }}${{ inputs.target_os_version }} .
      # Save image to a tar file for caching
      docker save ${IMAGE}:${GITHUB_SHA} > ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}_${GITHUB_SHA}.tar
      # Compress and cache the Docker image
      gzip ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}_${GITHUB_SHA}.tar
      CACHE_FILE="ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}_${GITHUB_SHA}.tar.gz"
      
      # Determine branch name for cache key
      if [ -n "${GITHUB_HEAD_REF}" ]; then
          branch_name=${GITHUB_HEAD_REF}
      else
          branch_name=${GITHUB_REF_NAME}
      fi
      
      # Generate safe cache key (alphanumeric + ._- only)
      CACHE_KEY="ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}_${{ github.sha }}"
      # CACHE_KEY=$(echo "$CACHE_KEY" | sed 's/[^a-zA-Z0-9._-]/_/g')
      
      # Prepare API request
      OWNER_REPO=${GITHUB_REPOSITORY}
      URL="https://api.github.com/repos/${OWNER_REPO}/actions/caches"
      
      # Create cache entry
      response=$(curl -s -H "Accept: application/vnd.github.v3+json" \
                    -H "Authorization: Bearer ${GITHUB_TOKEN}" \
                    -X POST \
                    -d "{\"key\":\"${CACHE_KEY}\", \"version\":\"${GITHUB_SHA}\"}" \
                    "${URL}")
      
      # Handle API response
      if echo "$response" | jq -e '.errors' > /dev/null; then
          echo "Error creating cache: $(echo "$response" | jq -c '.errors')"
      else
          upload_url=$(echo "$response" | jq -r '.upload_url')
          if [ -z "$upload_url" ] || [ "$upload_url" = "null" ]; then
              echo "Failed to get upload URL. Response: $response"
          else
              echo "Uploading cache file to $upload_url"
              curl -X PUT -H "Content-Type: application/octet-stream" \
                   --data-binary @"$CACHE_FILE" \
                   "$upload_url"
              if [ $? -eq 0 ]; then
                  echo "Cache uploaded successfully"
              else
                  echo "Cache upload failed"
              fi
          fi
      fi

      # If PR and same repository
      if [ -n "${GITHUB_HEAD_REF}" ] && [ "${GITHUB_REPOSITORY}" = "${GITHUB_EVENT_REPOSITORY_FULL_NAME}" ]; then
        # Login to GHCR if running in a PR and same repository
        echo "${GITHUB_TOKEN}" | docker login ghcr.io -u "${GITHUB_ACTOR}" --password-stdin
        # Push developer's tag image
        DEV_TAG=$(echo "${GITHUB_HEAD_REF}" | sed 's/[^a-zA-Z0-9._-]/_/g')
        docker tag ${IMAGE}:${GITHUB_SHA} ${IMAGE}:${DEV_TAG:-unknown}
        docker push ${IMAGE}:${GITHUB_SHA}
        docker push ${IMAGE}:${DEV_TAG:-unknown}
      fi
