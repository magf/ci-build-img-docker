name: CI Build Image Docker
description: Builds and caches Docker images for Greengage CI pipelines. Supports versioned OS configurations, tags images with commit SHA, and pushes to GHCR for PRs. Ideal for CI/CD workflows requiring containerized environments.
inputs:
  version:
    description: 'Greengage version (e.g., 6 or 7)'
    required: true
  target_os:
    description: 'Target operating system (e.g., ubuntu, centos)'
    required: true
  target_os_version:
    description: 'Target OS version (e.g., 20, 7)'
    required: false
    default: ''
  python3:
    description: 'Python3 build argument for the Dockerfile'
    required: false
    default: ''
runs:
  using: 'docker'
  image: 'docker://docker:24.0'
  args:
    - /bin/sh
    - -c
    - |
      # Exit on any error
      set -ex
      # Install dependencies for git, curl, jq and gzip
      apk add --no-cache git curl jq gzip
      # Debug: Show repository being cloned
      echo "Cloning repository: ${GITHUB_REPOSITORY}"
      # Clone repository without submodules
      git clone https://github.com/${GITHUB_REPOSITORY}.git /workspace
      cd /workspace
      # DEBUG
      env
      # Checkout the specific commit
      git checkout ${GITHUB_HEAD_REF}
      # Debug: Show submodules being initialized
      echo "Initializing submodules"
      # Initialize and update submodules recursively
      git submodule update --init --recursive
      git fetch --tags --force
      # Set up Docker Buildx for multi-platform builds
      docker buildx create --use
      # Presets
      NAME="ggdb${{ inputs.version }}_${{ inputs.target_os }}${{ inputs.target_os_version }}"
      IMAGE=ghcr.io/${GITHUB_REPOSITORY}/${NAME}
      IMAGE=$(echo "$IMAGE" | tr '[:upper:]' '[:lower:]')
      # Build Docker image with specified version and OS
      docker build --tag ${IMAGE}:${GITHUB_SHA} -f ci/Dockerfile.${{ inputs.target_os }}${{ inputs.target_os_version }} .
      # Save image to a tar file for caching
      docker save ${IMAGE}:${GITHUB_SHA} > ${GITHUB_WORKSPACE}/${NAME}_${GITHUB_SHA}.tar

      # If PR and same repository
      if [ -n "${GITHUB_HEAD_REF}" ] && [ "${GITHUB_REPOSITORY}" = "${GITHUB_EVENT_REPOSITORY_FULL_NAME}" ]; then
        # Login to GHCR if running in a PR and same repository
        echo "${GITHUB_TOKEN}" | docker login ghcr.io -u "${GITHUB_ACTOR}" --password-stdin
        # Push developer's tag image
        DEV_TAG=$(echo "${GITHUB_HEAD_REF}" | sed 's/[^a-zA-Z0-9._-]/_/g')
        docker tag ${IMAGE}:${GITHUB_SHA} ${IMAGE}:${DEV_TAG:-unknown}
        docker push ${IMAGE}:${GITHUB_SHA}
        docker push ${IMAGE}:${DEV_TAG:-unknown}
      fi
